[
["section-9.html", "第9章 贝叶斯统计 9.1 贝塔分布 9.2 为什么击球的概率分布符合贝塔分布？ 9.3 先验与后验 9.4 经验贝叶斯 9.5 从整体到个人 9.6 可信区间与置信区间 9.7 后验错误率 9.8 错误发现率 9.9 q值 9.10 贝叶斯视角的假设检验 9.11 比例检验 9.12 错误率控制 9.13 影响因子 9.14 混合概率模型 9.15 模拟验证结果 9.16 网络资源", " 第9章 贝叶斯统计 9.1 贝塔分布 贝塔分布的本质是概率分布的分布 棒球击球率的预测问题，你不可能预测一个刚打出本垒下一个也击中，会有一个先验概率 这个概率可以用一个参数 \\(\\alpha\\) 与 \\(\\beta\\) 的贝塔分布来描述，例如一共打了300个球，81个击中，219个击空，那么 \\(\\alpha\\) 为81，\\(\\beta\\) 为219 均值为\\(\\frac{\\alpha}{\\alpha + \\beta} = \\frac{81}{81+219} = 0.27\\) 概率密度分布图，从图上我们可以看出一个大约在0.2-0.35的概率区间，表示击球的先验概率空间可能的取值 library(ggplot2) x &lt;- seq(0,1,length=100) db &lt;- dbeta(x, 81, 219) ggplot() + geom_line(aes(x,db)) + ylab(&quot;Density of beta&quot;) 9.2 为什么击球的概率分布符合贝塔分布？ 设想球员A打了一个球打中了，那么在没有先验知识的情况下我会认为他击中概率为1 这个球员又打中了一个球，那么还是1 但第三个没打中，我们会认为他击中概率是0吗？ 一般而言，这类连续击球问题可以用二项分布来描述，例如10个球打中8个的概率，我们假设这个击球概率为q，那么这个概率应该是个q的函数： \\[f(q) \\propto q^a(1-q)^b\\] q对于一个实际问题是确定的常数，所以出现这个场景的概率实际上是a与b的函数 为了保障这个概率函数累积为1，需要除一个跟a与b有关的数 这个数可以用贝塔函数\\(B(a,b)\\)来表示，数学证明略 如果接着打了一个中了，那么如何更新这个概率？ 根据贝叶斯公式，最后推导出的结果如下： \\[Beta(\\alpha+1,\\beta+0)\\] 那么我们对这个击球率的估计就略高了一点，这是贝塔分布的神奇之处，形式非常简单，理解也很直观 9.3 先验与后验 如果我们后续观察的击球少，那么不太容易影响到对概率的先验估计 x &lt;- seq(0,1,length=100) db &lt;- dbeta(x, 81+1, 219) ggplot() + geom_line(aes(x,db)) + ylab(&quot;Density of beta&quot;) 如果后续观察了大量的击球都中了，那么概率会偏向后面数据量的那一部分 x &lt;- seq(0,1,length=100) db &lt;- dbeta(x, 81+1000, 219) ggplot() + geom_line(aes(x,db)) + ylab(&quot;Density of beta&quot;) 这是贝叶斯分析的核心思想，通过证据更新经验 最后得到的均值（后验0.83）一定是介于经验值（先验0.27）与证据值（全击中就是1）之间 贝塔分布天然适合描述一个对概率的估计场景 另一种不那么严谨的理解方法是如果一个概率是稳定的，那么多次实验的结果差别不会太大，则有： \\[\\frac{a}{b} = \\frac{c}{d} = \\frac{a+b}{c+d}\\] 如果每次实验的概率持平，那么不存在不确定度；但如果前面实验的次数少而后面实验的次数多，那么概率会偏重于后面，这就是贝塔分布想说明的事 9.4 经验贝叶斯 对于两个球员，一个打了10个球中了4个，另一个打了1000个球中了300个，一般击中概率0.2，你会选哪一个？ 我们对于小样本量的统计推断会有天然的不信任，如何通过统计量来描述？ 下面用MLB的数据说明，首先提取出球员的击球数据： library(dplyr) library(tidyr) library(Lahman) # 拿到击球数据 career &lt;- Batting %&gt;% filter(AB &gt; 0) %&gt;% anti_join(Pitching, by = &quot;playerID&quot;) %&gt;% group_by(playerID) %&gt;% summarize(H = sum(H), AB = sum(AB)) %&gt;% mutate(average = H / AB) # 把ID换成球员名字 career &lt;- Master %&gt;% tbl_df() %&gt;% dplyr::select(playerID, nameFirst, nameLast) %&gt;% unite(name, nameFirst, nameLast, sep = &quot; &quot;) %&gt;% inner_join(career, by = &quot;playerID&quot;) %&gt;% dplyr::select(-playerID) # 展示数据 career ## # A tibble: 9,509 x 4 ## name H AB average ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 Hank Aaron 3771 12364 0.305 ## 2 Tommie Aaron 216 944 0.229 ## 3 Andy Abad 2 21 0.0952 ## 4 John Abadie 11 49 0.224 ## 5 Ed Abbaticchio 772 3044 0.254 ## 6 Fred Abbott 107 513 0.209 ## 7 Jeff Abbott 157 596 0.263 ## 8 Kurt Abbott 523 2044 0.256 ## 9 Ody Abbott 13 70 0.186 ## 10 Frank Abercrombie 0 4 0 ## # ... with 9,499 more rows # 击球前5 career %&gt;% arrange(desc(average)) %&gt;% head(5) %&gt;% kable() name H AB average Jeff Banister 1 1 1 Doc Bass 1 1 1 Steve Biras 2 2 1 C. B. Burns 1 1 1 Jackie Gallagher 1 1 1 # 击球后5 career %&gt;% arrange(average) %&gt;% head(5) %&gt;% kable() name H AB average Frank Abercrombie 0 4 0 Lane Adams 0 3 0 Horace Allen 0 7 0 Pete Allen 0 4 0 Walter Alston 0 1 0 如果仅考虑击球率会把很多板凳球员与运气球员包括进来，一个先验概率分布很有必要 那么考虑下如何得到，经验贝叶斯方法认为如果估计一个个体的参数，那么这个个体所在的整体的概率分布可作为先验概率分布 这个先验概率分布可以直接从数据中得到，然后我们要用极大似然或矩估计的方法拿到贝塔分布的两个参数： career_filtered &lt;- career %&gt;% filter(AB &gt;= 500) m &lt;- MASS::fitdistr(career_filtered$average, dbeta, start = list(shape1 = 1, shape2 = 10)) alpha0 &lt;- m$estimate[1] beta0 &lt;- m$estimate[2] # 看下拟合效果 ggplot(career_filtered) + geom_histogram(aes(average, y = ..density..), binwidth = .005) + stat_function(fun = function(x) dbeta(x, alpha0, beta0), color = &quot;red&quot;, size = 1) + xlab(&quot;Batting average&quot;) 9.5 从整体到个人 当我们估计个人的击球率时，整体可以作为先验函数，个人的数据可以通过贝塔分布更新到个体 那么如果一个人数据少，我们倾向于认为他是平均水平；数据多则认为符合个人表现 这事实上是一个分层结构，经验贝叶斯推断里隐含了这么一个从整体到个人的过程 career_eb &lt;- career %&gt;% mutate(eb_estimate = (H + alpha0) / (AB + alpha0 + beta0)) # 击球率高 career_eb %&gt;% arrange(desc(eb_estimate)) %&gt;% head(5) %&gt;% kable() name H AB average eb_estimate Rogers Hornsby 2930 8173 0.358 0.355 Shoeless Joe Jackson 1772 4981 0.356 0.350 Ed Delahanty 2596 7505 0.346 0.342 Billy Hamilton 2158 6268 0.344 0.340 Harry Heilmann 2660 7787 0.342 0.338 # 击球率低 career_eb %&gt;% arrange(eb_estimate) %&gt;% head(5) %&gt;% kable() name H AB average eb_estimate Bill Bergen 516 3028 0.170 0.179 Ray Oyler 221 1265 0.175 0.191 John Vukovich 90 559 0.161 0.196 John Humphries 52 364 0.143 0.196 George Baker 74 474 0.156 0.196 # 整体估计 ggplot(career_eb, aes(average, eb_estimate, color = AB)) + geom_hline(yintercept = alpha0 / (alpha0 + beta0), color = &quot;red&quot;, lty = 2) + geom_point() + geom_abline(color = &quot;red&quot;) + scale_colour_gradient(trans = &quot;log&quot;, breaks = 10 ^ (1:5)) + xlab(&quot;Batting average&quot;) + ylab(&quot;Empirical Bayes batting average&quot;) 数据点多会收缩到\\(x=y\\)，也就是个人的击球率；数据点少则回归到整体击球率 这就是经验贝叶斯方法的全貌：先估计整体的参数，然后把整体参数作为先验概率估计个人参数 9.6 可信区间与置信区间 经验贝叶斯可以给出点估计，但现实中我们可能更关心区间估计 一般这类区间估计可以用二项式比例估计来进行，不过没有先验经验的限制置信区间大到没意义 经验贝叶斯会给出一个后验分布，这个分布可以用来求可信区间 library(broom) # 给出后验分布 career &lt;- Batting %&gt;% filter(AB &gt; 0) %&gt;% anti_join(Pitching, by = &quot;playerID&quot;) %&gt;% group_by(playerID) %&gt;% summarize(H = sum(H), AB = sum(AB)) %&gt;% mutate(average = H / AB) career &lt;- Master %&gt;% tbl_df() %&gt;% dplyr::select(playerID, nameFirst, nameLast) %&gt;% unite(name, nameFirst, nameLast, sep = &quot; &quot;) %&gt;% inner_join(career, by = &quot;playerID&quot;) career0 &lt;- Batting %&gt;% filter(AB &gt; 0) %&gt;% anti_join(Pitching, by = &quot;playerID&quot;) %&gt;% group_by(playerID) %&gt;% summarize(H = sum(H), AB = sum(AB), year = mean(yearID)) %&gt;% mutate(average = H / AB) career2 &lt;- Master %&gt;% tbl_df() %&gt;% dplyr::select(playerID, nameFirst, nameLast, bats) %&gt;% unite(name, nameFirst, nameLast, sep = &quot; &quot;) %&gt;% inner_join(career0, by = &quot;playerID&quot;) career_eb &lt;- career %&gt;% mutate(eb_estimate = (H + alpha0) / (AB + alpha0 + beta0)) career_eb &lt;- career_eb %&gt;% mutate(alpha1 = H + alpha0, beta1 = AB - H + beta0) # 提取洋基队的数据 yankee_1998 &lt;- c(&quot;brosisc01&quot;, &quot;jeterde01&quot;, &quot;knoblch01&quot;, &quot;martiti02&quot;, &quot;posadjo01&quot;, &quot;strawda01&quot;, &quot;willibe02&quot;) yankee_1998_career &lt;- career_eb %&gt;% filter(playerID %in% yankee_1998) # 提取可信区间 yankee_1998_career &lt;- yankee_1998_career %&gt;% mutate(low = qbeta(.025, alpha1, beta1), high = qbeta(.975, alpha1, beta1)) yankee_1998_career %&gt;% dplyr::select(-alpha1, -beta1, -eb_estimate) %&gt;% knitr::kable() playerID name H AB average low high brosisc01 Scott Brosius 1001 3889 0.257 0.244 0.271 jeterde01 Derek Jeter 3465 11195 0.310 0.300 0.317 knoblch01 Chuck Knoblauch 1839 6366 0.289 0.277 0.298 martiti02 Tino Martinez 1925 7111 0.271 0.260 0.280 posadjo01 Jorge Posada 1664 6092 0.273 0.262 0.283 strawda01 Darryl Strawberry 1401 5418 0.259 0.247 0.270 willibe02 Bernie Williams 2336 7869 0.297 0.286 0.305 # 绘制可信区间 yankee_1998_career %&gt;% mutate(name = reorder(name, average)) %&gt;% ggplot(aes(average, name)) + geom_point() + geom_errorbarh(aes(xmin = low, xmax = high)) + geom_vline(xintercept = alpha0 / (alpha0 + beta0), color = &quot;red&quot;, lty = 2) + xlab(&quot;Estimated batting average (w/ 95% interval)&quot;) + ylab(&quot;Player&quot;) # 对比置信区间与可信区间 career_eb &lt;- career_eb %&gt;% mutate(low = qbeta(.025, alpha1, beta1), high = qbeta(.975, alpha1, beta1)) set.seed(2016) some &lt;- career_eb %&gt;% sample_n(20) %&gt;% mutate(name = paste0(name, &quot; (&quot;, H, &quot;/&quot;, AB, &quot;)&quot;)) frequentist &lt;- some %&gt;% group_by(playerID, name, AB) %&gt;% do(tidy(binom.test(.$H, .$AB))) %&gt;% dplyr::select(playerID, name, estimate, low = conf.low, high = conf.high) %&gt;% mutate(method = &quot;Confidence&quot;) bayesian &lt;- some %&gt;% dplyr::select(playerID, name, AB, estimate = eb_estimate, low = low, high = high) %&gt;% mutate(method = &quot;Credible&quot;) combined &lt;- bind_rows(frequentist, bayesian) combined %&gt;% mutate(name2 = reorder(name, -AB)) %&gt;% ggplot(aes(estimate, name2, color = method, group = method)) + geom_point() + geom_errorbarh(aes(xmin = low, xmax = high)) + geom_vline(xintercept = alpha0 / (alpha0 + beta0), color = &quot;red&quot;, lty = 2) + xlab(&quot;Estimated batting average&quot;) + ylab(&quot;Player&quot;) + labs(color = &quot;&quot;) 可信区间与置信区间很大的区别在于前者考虑了先验概率进而实现了区间的收缩，后者则可看作无先验贝塔分布给出的区间估计，频率学派目前没有很好的收缩区间估计的方法 9.7 后验错误率 现实问题经常不局限于估计，而是侧重决策，例如如果一个球员的击球率高于某个值，他就可以进入名人堂（击球率大于0.3），这个决策常常伴随区间估计而不是简单的点估计 # 以 Hank Aaron 为例 career_eb %&gt;% filter(name == &quot;Hank Aaron&quot;) %&gt;% do(data_frame(x = seq(.27, .33, .0002), density = dbeta(x, .$alpha1, .$beta1))) %&gt;% ggplot(aes(x, density)) + geom_line() + geom_ribbon(aes(ymin = 0, ymax = density * (x &lt; .3)), alpha = .1, fill = &quot;red&quot;) + geom_vline(color = &quot;red&quot;, lty = 2, xintercept = .3) # 提取该球员数据 career_eb %&gt;% filter(name == &quot;Hank Aaron&quot;) ## # A tibble: 1 x 10 ## playerID name H AB average eb_estimate alpha1 beta1 low high ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 aaronha01 Hank… 3771 12364 0.305 0.304 3850. 8820. 0.296 0.312 # 计算其不进入名人堂的概率 pbeta(.3, 3850, 8818) ## [1] 0.169 后验错误率（Posterior Error Probability）可类比经典假设检验中的显著性水平\\(\\alpha\\) 后验包括率（Posterior Inclusion Probability）可类比经典假设检验中的置信水平\\(1-\\alpha\\) # 所有球员的后验错误率分布，大部分不超过0.3 career_eb &lt;- career_eb %&gt;% mutate(PEP = pbeta(.3, alpha1, beta1)) ggplot(career_eb, aes(PEP)) + geom_histogram(binwidth = .02) + xlab(&quot;Posterior Error Probability (PEP)&quot;) + xlim(0, 1) # 后验错误率与击球率的关系 career_eb %&gt;% ggplot(aes(eb_estimate, PEP, color = AB)) + geom_point(size = 1) + xlab(&quot;(Shrunken) batting average estimate&quot;) + ylab(&quot;Posterior Error Probability (PEP)&quot;) + geom_vline(color = &quot;red&quot;, lty = 2, xintercept = .3) + scale_colour_gradient(trans = &quot;log&quot;, breaks = 10 ^ (1:5)) 后验错误率高于0.3的多数是击球率与击球数都高的人，因为贝叶斯方法惩罚了击球数低的人 9.8 错误发现率 错误发现率（FDR）可用来控制一个整体决策，保证整体犯错的概率低于某个数值，错误发现率越高，越可能把假阳性包括进来 假如我们把进入名人堂的决策作为一个整体，则可允许一定的整体错误率，因为每个人的后验错误率可以计算且期望值线性可加和，我们可以得到一个整体的错误率 # 取前100个球员 top_players &lt;- career_eb %&gt;% arrange(PEP) %&gt;% head(100) # 总错率率 sum(top_players$PEP) ## [1] 5.07 # 平均错误率 mean(top_players$PEP) ## [1] 0.0507 # 错误率随所取球员的变化 sorted_PEP &lt;- career_eb %&gt;% arrange(PEP) mean(head(sorted_PEP$PEP, 50)) ## [1] 0.00186 mean(head(sorted_PEP$PEP, 200)) ## [1] 0.246 错误率在排序后前面低后面高，但这个错误率不特指某个球员，而是包含到某个球员的整体犯错的概率 9.9 q值 q值定义为排序后累积到某个样本的整体平均错误率，类似多重比较中对整体错误率控制的p值 # 生成每个球员的q值 career_eb &lt;- career_eb %&gt;% arrange(PEP) %&gt;% mutate(qvalue = cummean(PEP)) # 观察不同q值对名人堂球员数的影响 career_eb %&gt;% ggplot(aes(qvalue, rank(PEP))) + geom_line() + xlab(&quot;q-value cutoff&quot;) + ylab(&quot;Number of players included&quot;) # 观察小q值部分 career_eb %&gt;% filter(qvalue &lt; .25) %&gt;% ggplot(aes(qvalue, rank(PEP))) + geom_line() + xlab(&quot;q-value cutoff&quot;) + ylab(&quot;Number of players included&quot;) 200个人进入名人堂可能有约1/4的球员不合适，如果是50个人进入名人堂那么基本不会犯错 q值是一个整体而非个体的平均错误率，具有累积性，不代表q值大的那一个就是错的 q值在频率学派的多重比较里也有定义，虽然没有空假设（有先验概率），但实质等同 9.10 贝叶斯视角的假设检验 前面描述的是击球率如何求，如何进行区间估计与多个体的错误率控制，面向的个体或整体，那么如何解决比较问题 设想多个球员，我们考虑如何去比较他们击球率。如果两个球员击球率的概率密度曲线比较接近，那么即便均值有不同我们也无法进行区分；如果重叠比较少，那么我们有理由认为他们之间的差异显著 贝叶斯视角下如何定量描述这个差异是否显著？ 9.10.1 模拟验证 单纯取样比大小然后计算比例 # 提取两人数据 aaron &lt;- career_eb %&gt;% filter(name == &quot;Hank Aaron&quot;) piazza &lt;- career_eb %&gt;% filter(name == &quot;Mike Piazza&quot;) # 模拟取样10万次 piazza_simulation &lt;- rbeta(1e6, piazza$alpha1, piazza$beta1) aaron_simulation &lt;- rbeta(1e6, aaron$alpha1, aaron$beta1) # 计算一个人超过另一个人的概率 sim &lt;- mean(piazza_simulation &gt; aaron_simulation) sim ## [1] 0.606 9.10.2 数值积分 两个概率的联合概率分布，然后积分一个队员大于另一个的概率 d &lt;- .00002 limits &lt;- seq(.29, .33, d) sum(outer(limits, limits, function(x, y) { (x &gt; y) * dbeta(x, piazza$alpha1, piazza$beta1) * dbeta(y, aaron$alpha1, aaron$beta1) * d ^ 2 })) ## [1] 0.604 9.10.3 解析解 两个贝塔分布一个比另一个高是有含有贝塔函数的解析解的： \\[p_A \\sim \\mbox{Beta}(\\alpha_A, \\beta_A)\\] \\[p_B \\sim \\mbox{Beta}(\\alpha_B, \\beta_B)\\] \\[{\\rm Pr}(p_B &gt; p_A) = \\sum_{i=0}^{\\alpha_B-1}\\frac{B(\\alpha_A+i,\\beta_A+\\beta_B)}{(\\beta_B+i) B(1+i, \\beta_B) B(\\alpha_A, \\beta_A) }\\] h &lt;- function(alpha_a, beta_a, alpha_b, beta_b) { j &lt;- seq.int(0, round(alpha_b) - 1) log_vals &lt;- (lbeta(alpha_a + j, beta_a + beta_b) - log(beta_b + j) - lbeta(1 + j, beta_b) - lbeta(alpha_a, beta_a)) 1 - sum(exp(log_vals)) } h(piazza$alpha1, piazza$beta1, aaron$alpha1, aaron$beta1) ## [1] 0.605 9.10.4 正态近似求解 贝塔分布在\\(\\alpha\\)与\\(\\beta\\)比较大时接近正态分布，可以直接用正态分布的解析解求，速度快很多 h_approx &lt;- function(alpha_a, beta_a, alpha_b, beta_b) { u1 &lt;- alpha_a / (alpha_a + beta_a) u2 &lt;- alpha_b / (alpha_b + beta_b) var1 &lt;- alpha_a * beta_a / ((alpha_a + beta_a) ^ 2 * (alpha_a + beta_a + 1)) var2 &lt;- alpha_b * beta_b / ((alpha_b + beta_b) ^ 2 * (alpha_b + beta_b + 1)) pnorm(0, u2 - u1, sqrt(var1 + var2)) } h_approx(piazza$alpha1, piazza$beta1, aaron$alpha1, aaron$beta1) ## [1] 0.605 9.11 比例检验 这是个列联表问题，频率学派对比两个比例 two_players &lt;- bind_rows(aaron, piazza) two_players %&gt;% transmute(Player = name, Hits = H, Misses = AB - H) %&gt;% knitr::kable() Player Hits Misses Hank Aaron 3771 8593 Mike Piazza 2127 4784 prop.test(two_players$H, two_players$AB) ## ## 2-sample test for equality of proportions with continuity ## correction ## ## data: two_players$H out of two_players$AB ## X-squared = 0.1, df = 1, p-value = 0.7 ## alternative hypothesis: two.sided ## 95 percent confidence interval: ## -0.0165 0.0109 ## sample estimates: ## prop 1 prop 2 ## 0.305 0.308 贝叶斯学派对比两个比例 credible_interval_approx &lt;- function(a, b, c, d) { u1 &lt;- a / (a + b) u2 &lt;- c / (c + d) var1 &lt;- a * b / ((a + b) ^ 2 * (a + b + 1)) var2 &lt;- c * d / ((c + d) ^ 2 * (c + d + 1)) mu_diff &lt;- u2 - u1 sd_diff &lt;- sqrt(var1 + var2) data_frame(posterior = pnorm(0, mu_diff, sd_diff), estimate = mu_diff, conf.low = qnorm(.025, mu_diff, sd_diff), conf.high = qnorm(.975, mu_diff, sd_diff)) } credible_interval_approx(piazza$alpha1, piazza$beta1, aaron$alpha1, aaron$beta1) ## # A tibble: 1 x 4 ## posterior estimate conf.low conf.high ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0.605 -0.00181 -0.0151 0.0115 多个球员对比一个 set.seed(2016) intervals &lt;- career_eb %&gt;% filter(AB &gt; 10) %&gt;% sample_n(20) %&gt;% group_by(name, H, AB) %&gt;% do(credible_interval_approx(piazza$alpha1, piazza$beta1, .$alpha1, .$beta1)) %&gt;% ungroup() %&gt;% mutate(name = reorder(paste0(name, &quot; (&quot;, H, &quot; / &quot;, AB, &quot;)&quot;), -estimate)) f &lt;- function(H, AB) broom::tidy(prop.test(c(H, piazza$H), c(AB, piazza$AB))) prop_tests &lt;- purrr::map2_df(intervals$H, intervals$AB, f) %&gt;% mutate(estimate = estimate1 - estimate2, name = intervals$name) all_intervals &lt;- bind_rows( mutate(intervals, type = &quot;Credible&quot;), mutate(prop_tests, type = &quot;Confidence&quot;) ) ggplot(all_intervals, aes(x = estimate, y = name, color = type)) + geom_point() + geom_errorbarh(aes(xmin = conf.low, xmax = conf.high)) + xlab(&quot;Piazza average - player average&quot;) + ylab(&quot;Player&quot;) 置信区间与可信区间的主要差异来自于经验贝叶斯的区间收敛 9.12 错误率控制 如果我打算交易一个球员，那么如何筛选候选人？ 先选那些击球率更好的球员 # 对比打算交易的球员与其他球员 career_eb_vs_piazza &lt;- bind_cols( career_eb, credible_interval_approx(piazza$alpha1, piazza$beta1, career_eb$alpha1, career_eb$beta1)) %&gt;% dplyr::select(name, posterior, conf.low, conf.high) career_eb_vs_piazza ## # A tibble: 9,509 x 4 ## name posterior conf.low conf.high ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Rogers Hornsby 2.84e-11 0.0345 0.0639 ## 2 Ed Delahanty 7.11e- 7 0.0218 0.0518 ## 3 Shoeless Joe Jackson 8.82e- 8 0.0278 0.0611 ## 4 Willie Keeler 4.62e- 6 0.0183 0.0472 ## 5 Nap Lajoie 1.62e- 5 0.0158 0.0441 ## 6 Tony Gwynn 1.83e- 5 0.0157 0.0442 ## 7 Harry Heilmann 7.19e- 6 0.0180 0.0476 ## 8 Lou Gehrig 1.43e- 5 0.0167 0.0461 ## 9 Billy Hamilton 7.05e- 6 0.0190 0.0502 ## 10 Eddie Collins 2.00e- 4 0.0113 0.0393 ## # ... with 9,499 more rows # 计算q值 career_eb_vs_piazza &lt;- career_eb_vs_piazza %&gt;% arrange(posterior) %&gt;% mutate(qvalue = cummean(posterior)) # 筛选那些q值小于0.05的 better &lt;- career_eb_vs_piazza %&gt;% filter(qvalue &lt; .05) better ## # A tibble: 49 x 5 ## name posterior conf.low conf.high qvalue ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Rogers Hornsby 2.84e-11 0.0345 0.0639 2.84e-11 ## 2 Shoeless Joe Jackson 8.82e- 8 0.0278 0.0611 4.41e- 8 ## 3 Ed Delahanty 7.11e- 7 0.0218 0.0518 2.66e- 7 ## 4 Willie Keeler 4.62e- 6 0.0183 0.0472 1.35e- 6 ## 5 Billy Hamilton 7.05e- 6 0.0190 0.0502 2.49e- 6 ## 6 Harry Heilmann 7.19e- 6 0.0180 0.0476 3.28e- 6 ## 7 Lou Gehrig 1.43e- 5 0.0167 0.0461 4.86e- 6 ## 8 Nap Lajoie 1.62e- 5 0.0158 0.0441 6.28e- 6 ## 9 Tony Gwynn 1.83e- 5 0.0157 0.0442 7.61e- 6 ## 10 Bill Terry 3.04e- 5 0.0162 0.0472 9.89e- 6 ## # ... with 39 more rows 这样我们筛到一个可交易的群体，总和错误率不超过5% 9.13 影响因子 击球率高除了能力影响外还有可能是因为得到的机会多或者光环效应，例如一开始凭运气打得好，后面给机会多，通过经验累积提高了击球率 career %&gt;% filter(AB &gt;= 20) %&gt;% ggplot(aes(AB, average)) + geom_point() + geom_smooth(method = &quot;lm&quot;, se = FALSE) + scale_x_log10() 击球数低方差会大，这比较正常，很多人挂在起跑线上了 直接使用经验贝叶斯方法会导致整体向均值收敛，这高估了新手的数据 prior_mu &lt;- alpha0 / (alpha0 + beta0) career_eb %&gt;% filter(AB &gt;= 20) %&gt;% gather(type, value, average, eb_estimate) %&gt;% mutate(type = plyr::revalue(type, c(average = &quot;Raw&quot;, eb_estimate = &quot;With EB Shrinkage&quot;))) %&gt;% ggplot(aes(AB, value)) + geom_point() + scale_x_log10() + geom_hline(color = &quot;red&quot;, lty = 2, size = 1.5, yintercept = prior_mu) + facet_wrap(~type) + ylab(&quot;average&quot;) + geom_smooth(method = &quot;lm&quot;) 为了如实反应这种情况，我们应该认为击球率符合贝塔分布，但同时贝塔分布的两个参数受击球数的影响，击球数越多，越可能击中 这个模型可以用贝塔－二项式回归来描述 \\[\\mu_i = \\mu_0 + \\mu_{\\mbox{AB}} \\cdot \\log(\\mbox{AB})\\] \\[\\alpha_{0,i} = \\mu_i / \\sigma_0\\] \\[\\beta_{0,i} = (1 - \\mu_i) / \\sigma_0\\] \\[p_i \\sim \\mbox{Beta}(\\alpha_{0,i}, \\beta_{0,i})\\] \\[H_i \\sim \\mbox{Binom}(\\mbox{AB}_i, p_i)\\] 9.13.1 拟合模型 寻找拟合后的模型参数，构建新的先验概率 library(gamlss) # 拟合模型 fit &lt;- gamlss(cbind(H, AB - H) ~ log(AB), data = career_eb, family = BB(mu.link = &quot;identity&quot;)) ## GAMLSS-RS iteration 1: Global Deviance = 92881 ## GAMLSS-RS iteration 2: Global Deviance = 73483 ## GAMLSS-RS iteration 3: Global Deviance = 69321 ## GAMLSS-RS iteration 4: Global Deviance = 69315 ## GAMLSS-RS iteration 5: Global Deviance = 69315 # 展示拟合参数 td &lt;- tidy(fit) td ## parameter term estimate std.error statistic p.value ## 1 mu (Intercept) 0.145 0.001599 90.5 0 ## 2 mu log(AB) 0.015 0.000218 68.8 0 ## 3 sigma (Intercept) -6.340 0.024709 -256.6 0 # 构建新的先验概率 mu_0 &lt;- td$estimate[1] mu_AB &lt;- td$estimate[2] sigma &lt;- exp(td$estimate[3]) # 看看AB对先验概率的影响 crossing(x = seq(0.08, .35, .001), AB = c(1, 10, 100, 1000, 10000)) %&gt;% mutate(density = dbeta(x, (mu_0 + mu_AB * log(AB)) / sigma, (1 - (mu_0 + mu_AB * log(AB))) / sigma)) %&gt;% mutate(AB = factor(AB)) %&gt;% ggplot(aes(x, density, color = AB, group = AB)) + geom_line() + xlab(&quot;Batting average&quot;) + ylab(&quot;Prior density&quot;) 9.13.2 求后验概率 # 计算所有拟合值 mu &lt;- fitted(fit, parameter = &quot;mu&quot;) sigma &lt;- fitted(fit, parameter = &quot;sigma&quot;) # 计算所有后验概率 career_eb_wAB &lt;- career_eb %&gt;% dplyr::select(name, H, AB, original_eb = eb_estimate) %&gt;% mutate(mu = mu, alpha0 = mu / sigma, beta0 = (1 - mu) / sigma, alpha1 = alpha0 + H, beta1 = beta0 + AB - H, new_eb = alpha1 / (alpha1 + beta1)) # 展示拟合后的击球率 ggplot(career_eb_wAB, aes(original_eb, new_eb, color = AB)) + geom_point() + geom_abline(color = &quot;red&quot;) + xlab(&quot;Original EB Estimate&quot;) + ylab(&quot;EB Estimate w/ AB term&quot;) + scale_color_continuous(trans = &quot;log&quot;, breaks = 10 ^ (0:4)) # 对比 library(tidyr) lev &lt;- c(raw = &quot;Raw H / AB&quot;, original_eb = &quot;EB Estimate&quot;, new_eb = &quot;EB w/ Regression&quot;) career_eb_wAB %&gt;% filter(AB &gt;= 10) %&gt;% mutate(raw = H / AB) %&gt;% gather(type, value, raw, original_eb, new_eb) %&gt;% mutate(mu = ifelse(type == &quot;original_eb&quot;, prior_mu, ifelse(type == &quot;new_eb&quot;, mu, NA))) %&gt;% mutate(type = factor(plyr::revalue(type, lev), lev)) %&gt;% ggplot(aes(AB, value)) + geom_point() + geom_line(aes(y = mu), color = &quot;red&quot;) + scale_x_log10() + facet_wrap(~type) + xlab(&quot;At-Bats (AB)&quot;) + ylab(&quot;Estimate&quot;) 矫正后我们的数据更复合现实了，其实这是贝叶斯分层模型的一个简单版本，通过考虑更多因素，我们可以构建更复杂的模型来挖掘出我们所需要的信息 9.13.3 考虑更多因素 现在我们听说左利手跟右利手的表现可能不一样，所以我们要对模型进行完善，考虑把左右手参数加入模型 # 展示数据 career2 %&gt;% count(bats) ## # A tibble: 4 x 2 ## bats n ## &lt;fct&gt; &lt;int&gt; ## 1 B 777 ## 2 L 2680 ## 3 R 5397 ## 4 &lt;NA&gt; 655 # 排除NA career3 &lt;- career2 %&gt;% filter(!is.na(bats)) %&gt;% mutate(bats = relevel(bats, &quot;R&quot;)) # 重建模型 fit2 &lt;- gamlss(cbind(H, AB - H) ~ log(AB) + bats, data = career3, family = BB(mu.link = &quot;identity&quot;)) ## GAMLSS-RS iteration 1: Global Deviance = 89139 ## GAMLSS-RS iteration 2: Global Deviance = 70275 ## GAMLSS-RS iteration 3: Global Deviance = 66100 ## GAMLSS-RS iteration 4: Global Deviance = 66094 ## GAMLSS-RS iteration 5: Global Deviance = 66094 # 观察参数 tidy(fit2) ## parameter term estimate std.error statistic p.value ## 1 mu (Intercept) 0.14316 0.001641 87.21 0.00e+00 ## 2 mu log(AB) 0.01485 0.000222 67.01 0.00e+00 ## 3 mu batsB -0.00138 0.000991 -1.39 1.65e-01 ## 4 mu batsL 0.00973 0.000637 15.28 5.03e-52 ## 5 sigma (Intercept) -6.42523 0.025202 -254.95 0.00e+00 sigma &lt;- fitted(fit2, &quot;sigma&quot;)[1] crossing(bats = c(&quot;L&quot;, &quot;R&quot;), AB = c(1, 10, 100, 1000, 10000)) %&gt;% augment(fit2, newdata = .) %&gt;% rename(mu = .fitted) %&gt;% crossing(x = seq(.1, .36, .0005)) %&gt;% mutate(alpha = mu / sigma, beta = (1 - mu) / sigma, density = dbeta(x, alpha, beta)) %&gt;% ggplot(aes(x, density, color = factor(AB), lty = bats)) + geom_line() + labs(x = &quot;Batting average&quot;, y = &quot;Prior density&quot;, color = &quot;AB&quot;, lty = &quot;Batting hand&quot;) 存在先验概率的情况下，可以考虑考察随着击球数增长左右手的不同 crossing(bats = c(&quot;L&quot;, &quot;R&quot;), AB = c(10, 100, 1000, 10000)) %&gt;% augment(fit2, newdata = .) %&gt;% mutate(H = .3 * AB, alpha0 = .fitted / sigma, beta0 = (1 - .fitted) / sigma, alpha1 = alpha0 + H, beta1 = beta0 + AB - H, estimate = alpha1 / (alpha1 + beta1), conf.low = qbeta(.025, alpha1, beta1), conf.high = qbeta(.975, alpha1, beta1), record = paste(H, AB, sep = &quot; / &quot;)) %&gt;% ggplot(aes(estimate, record, color = bats)) + geom_point() + geom_errorbarh(aes(xmin = conf.low, xmax = conf.high)) + labs(x = &quot;Estimate w/ 95% credible interval&quot;, y = &quot;Batting record&quot;, color = &quot;Batting hand&quot;) 另一个要考虑的因素是不同年份的平均击球率可能也有起伏 career3 %&gt;% mutate(decade = factor(round(year - 5, -1))) %&gt;% filter(AB &gt;= 500) %&gt;% ggplot(aes(decade, average)) + geom_boxplot() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + ylab(&quot;Batting average&quot;) # 用样条插值来进行拟合 library(splines) fit3 &lt;- gamlss(cbind(H, AB - H) ~ 0 + ns(year, df = 5) + bats + log(AB), data = career3, family = BB(mu.link = &quot;identity&quot;)) # 观察在击球数1000上先验概率的变化 plot_gamlss_fit &lt;- function(f) { career3 %&gt;% dplyr::select(year, bats) %&gt;% distinct() %&gt;% filter(bats != &quot;B&quot;) %&gt;% mutate(AB = 1000) %&gt;% augment(f, newdata = .) %&gt;% rename(mu = .fitted) %&gt;% mutate(sigma = fitted(fit3, &quot;sigma&quot;)[1], alpha0 = mu / sigma, beta0 = (1 - mu) / sigma, conf_low = qbeta(.025, alpha0, beta0), conf_high = qbeta(.975, alpha0, beta0)) %&gt;% ggplot(aes(year, mu, color = bats, group = bats)) + geom_line() + geom_ribbon(aes(ymin = conf_low, ymax = conf_high), linetype = 2, alpha = .1) + labs(x = &quot;Year&quot;, y = &quot;Prior distribution (median + 95% quantiles)&quot;, color = &quot;Batting hand&quot;) } plot_gamlss_fit(fit3) 同时另一个问题是这些因素会交互影响 fit4 &lt;- gamlss(cbind(H, AB - H) ~ 0 + ns(year, 5) * bats + log(AB), data = career3, family = BB(mu.link = &quot;identity&quot;)) plot_gamlss_fit(fit4) Pitching %&gt;% dplyr::select(playerID, yearID, GS) %&gt;% distinct() %&gt;% inner_join(dplyr::select(Master, playerID, throws)) %&gt;% count(yearID, throws, wt = GS) %&gt;% filter(!is.na(throws)) %&gt;% mutate(percent = n / sum(n)) %&gt;% filter(throws == &quot;L&quot;) %&gt;% ggplot(aes(yearID, percent)) + geom_line() + geom_smooth() + scale_y_continuous(labels = scales::percent_format()) + xlab(&quot;Year&quot;) + ylab(&quot;% of games with left-handed pitcher&quot;) 左右手之间的差距伴随年份在逐渐减少 players &lt;- crossing(year = c(1915, 1965, 2015), bats = c(&quot;L&quot;, &quot;R&quot;), H = 30, AB = 100) players_posterior &lt;- players %&gt;% mutate(mu = predict(fit4, what = &quot;mu&quot;, newdata = players), sigma = predict(fit4, what = &quot;sigma&quot;, newdata = players, type = &quot;response&quot;), alpha0 = mu / sigma, beta0 = (1 - mu) / sigma, alpha1 = alpha0 + H, beta1 = beta0 + AB - H) players_posterior %&gt;% crossing(x = seq(.15, .3, .001)) %&gt;% mutate(density = dbeta(x, alpha1, beta1)) %&gt;% ggplot(aes(x, density, color = bats)) + geom_line() + facet_wrap(~ year) + xlab(&quot;Batting average&quot;) + ylab(&quot;Posterior density&quot;) + ggtitle(&quot;Posterior distributions for batters with 30 / 100&quot;) 经验贝叶斯对先验概率的估计类似频率学派，但进行的又是贝叶斯分析 9.14 混合概率模型 用击球概率为例，击球手跟非击球手的概率分布是不一样的，那么实际看到的总体球员概率分布应该是一个混合在一起的两个独立分布 # 找出投球3次以上的人 pitchers &lt;- Pitching %&gt;% group_by(playerID) %&gt;% summarize(gamesPitched = sum(G)) %&gt;% filter(gamesPitched &gt; 3) # 参考上一章节的发现找出击球率稳定的选手 career &lt;- Batting %&gt;% filter(AB &gt; 0, lgID == &quot;NL&quot;, yearID &gt;= 1980) %&gt;% group_by(playerID) %&gt;% summarize(H = sum(H), AB = sum(AB), year = mean(yearID)) %&gt;% mutate(average = H / AB, isPitcher = playerID %in% pitchers$playerID) # 链接上名字 career &lt;- Master %&gt;% tbl_df() %&gt;% dplyr::select(playerID, nameFirst, nameLast, bats) %&gt;% unite(name, nameFirst, nameLast, sep = &quot; &quot;) %&gt;% inner_join(career, by = &quot;playerID&quot;) 9.14.1 期望最大算法 将一个分布拆成两个，可以使用期望最大算法 set.seed(2017) # 先随机分为两组 starting_data &lt;- career %&gt;% filter(AB &gt;= 20) %&gt;% dplyr::select(-year, -bats, -isPitcher) %&gt;% mutate(cluster = factor(sample(c(&quot;A&quot;, &quot;B&quot;), n(), replace = TRUE))) # 观察效果 starting_data %&gt;% ggplot(aes(average, color = cluster)) + geom_density() library(VGAM) fit_bb_mle &lt;- function(x, n) { # dbetabinom.ab 是用n、alpha与beta作为参数的二项贝塔分布的似然度函数 ll &lt;- function(alpha, beta) { -sum(dbetabinom.ab(x, n, alpha, beta, log = TRUE)) } m &lt;- stats4::mle(ll, start = list(alpha = 3, beta = 10), method = &quot;L-BFGS-B&quot;, lower = c(0.001, .001)) ab &lt;- stats4::coef(m) data_frame(alpha = ab[1], beta = ab[2], number = length(x)) } # 看下初始参数 fit_bb_mle(starting_data$H, starting_data$AB) ## # A tibble: 1 x 3 ## alpha beta number ## &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 12.7 45.1 3420 # 看下随机分拆后的参数并生成各分组样本数的先验概率 fits &lt;- starting_data %&gt;% group_by(cluster) %&gt;% do(fit_bb_mle(.$H, .$AB)) %&gt;% ungroup() %&gt;% mutate(prior = number / sum(number)) fits ## # A tibble: 2 x 5 ## cluster alpha beta number prior ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; ## 1 A 12.4 44.3 1704 0.498 ## 2 B 12.9 46.0 1716 0.502 算法优化的期望是将这两个分布分拆开，前面一次分拆已经产生微弱差异，下面就通过贝叶斯思想对数据更新这个差异重新分组让两者分开 assignments &lt;- starting_data %&gt;% dplyr::select(-cluster) %&gt;% crossing(fits) %&gt;% mutate(likelihood = prior * VGAM::dbetabinom.ab(H, AB, alpha, beta)) %&gt;% group_by(playerID) %&gt;% top_n(1, likelihood) %&gt;% ungroup() # 去除掉原有分组，根据更新的后验概率重新分组 assignments ## # A tibble: 3,420 x 11 ## playerID name H AB average cluster alpha beta number prior ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; ## 1 abbotje01 Jeff Ab… 11 42 0.262 B 12.9 46.0 1716 0.502 ## 2 abbotji01 Jim Abb… 2 21 0.0952 A 12.4 44.3 1704 0.498 ## 3 abbotku01 Kurt Ab… 475 1860 0.255 B 12.9 46.0 1716 0.502 ## 4 abbotky01 Kyle Ab… 3 31 0.0968 A 12.4 44.3 1704 0.498 ## 5 abercre01 Reggie … 86 386 0.223 B 12.9 46.0 1716 0.502 ## 6 abnersh01 Shawn A… 110 531 0.207 B 12.9 46.0 1716 0.502 ## 7 abreubo01 Bobby A… 1607 5395 0.298 B 12.9 46.0 1716 0.502 ## 8 abreuto01 Tony Ab… 129 509 0.253 B 12.9 46.0 1716 0.502 ## 9 acevejo01 Jose Ac… 8 101 0.0792 A 12.4 44.3 1704 0.498 ## 10 aceveju01 Juan Ac… 6 65 0.0923 A 12.4 44.3 1704 0.498 ## # ... with 3,410 more rows, and 1 more variable: likelihood &lt;dbl&gt; # 观察更新后概率分布 ggplot(assignments, aes(average, fill = cluster)) + geom_histogram() 不断重复这个过程，最终分拆数据（其实就是第一步分拆最重要，后面直接收敛了） set.seed(1987) iterate_em &lt;- function(state, ...) { fits &lt;- state$assignments %&gt;% group_by(cluster) %&gt;% do(mutate(fit_bb_mle(.$H, .$AB), number = nrow(.))) %&gt;% ungroup() %&gt;% mutate(prior = number / sum(number)) assignments &lt;- assignments %&gt;% dplyr::select(playerID:average) %&gt;% crossing(fits) %&gt;% mutate(likelihood = prior * VGAM::dbetabinom.ab(H, AB, alpha, beta)) %&gt;% group_by(playerID) %&gt;% top_n(1, likelihood) %&gt;% ungroup() list(assignments = assignments, fits = fits) } library(purrr) # 使用purrr包存储中间结果 iterations &lt;- accumulate(1:5, iterate_em, .init = list(assignments = starting_data)) assignment_iterations &lt;- iterations %&gt;% map_df(&quot;assignments&quot;, .id = &quot;iteration&quot;) # 观察收敛过程 assignment_iterations %&gt;% ggplot(aes(average, fill = cluster)) + geom_histogram() + facet_wrap(~ iteration) fit_iterations &lt;- iterations %&gt;% map_df(&quot;fits&quot;, .id = &quot;iteration&quot;) # 两个分布的收敛过程 fit_iterations %&gt;% crossing(x = seq(.001, .4, .001)) %&gt;% mutate(density = prior * dbeta(x, alpha, beta)) %&gt;% ggplot(aes(x, density, color = iteration, group = iteration)) + geom_line() + facet_wrap(~ cluster) 9.14.2 分配 得到每个选手在两个分布中后验概率后要对其进行分配，这里我们认为拆分出的两个分布其实就是是否是击球手的两个分组，由于两组重叠较多，直接分配会有困难 # 找6个击球数100的选手进行分配 batter_100 &lt;- career %&gt;% filter(AB == 100) %&gt;% arrange(average) batter_100 ## # A tibble: 5 x 8 ## playerID name bats H AB year average isPitcher ## &lt;chr&gt; &lt;chr&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;lgl&gt; ## 1 dejesjo01 Jose de Jesus R 11 100 1990. 0.11 TRUE ## 2 mahonmi02 Mike Mahoney R 18 100 2002. 0.18 FALSE ## 3 cancero01 Robinson Cancel R 20 100 2007. 0.2 FALSE ## 4 buschmi01 Mike Busch R 22 100 1996. 0.22 FALSE ## 5 shealry01 Ryan Shealy R 32 100 2006. 0.32 FALSE # 前面算法得到的最终结果 final_parameters &lt;- fit_iterations %&gt;% filter(iteration == max(iteration)) final_parameters ## # A tibble: 2 x 6 ## iteration cluster alpha beta number prior ## &lt;chr&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; ## 1 5 A 38.6 278. 831 0.243 ## 2 5 B 104. 307. 2589 0.757 # 观察球员位置 final_parameters %&gt;% crossing(x = 0:45) %&gt;% mutate(density = prior * VGAM::dbetabinom.ab(x, 100, alpha, beta)) %&gt;% ggplot(aes(x, density)) + geom_line(aes(color = cluster)) + geom_vline(aes(xintercept = H), data = batter_100, lty = 2) + geom_text(aes(x = H, y = -.022, label = name), data = batter_100, hjust = 1, vjust = 1, angle = 270) + labs(x = &quot;H (out of 100 at-bats)&quot;, y = &quot;Likelihood of this H out of 100 hits&quot;) # 根据贝叶斯理论，我们可以用在A分组的似然度比上两个分组似然度的和得到后验概率 final_parameters %&gt;% crossing(H = 1:40) %&gt;% transmute(H, cluster, likelihood = prior * VGAM::dbetabinom.ab(H, 100, alpha, beta)) %&gt;% spread(cluster, likelihood) %&gt;% mutate(probability_A = A / (A + B)) %&gt;% ggplot(aes(H, probability_A)) + geom_line() + geom_vline(aes(xintercept = H), data = batter_100, lty = 2) + geom_text(aes(x = H, y = 0, label = name), data = batter_100, hjust = 1, vjust = 1, angle = 270) + labs(x = &quot;H (out of 100 at-bats)&quot;, y = &quot;(Likelihood if pitcher) / (Likelihood if pitcher + Likelihood if not)&quot;, title = &quot;Posterior probability a player is in the pitcher cluster&quot;) 通过构建后验概率，我们可以直接对结果基于概率进行分组 career_likelihoods &lt;- career %&gt;% filter(AB &gt; 20) %&gt;% crossing(final_parameters) %&gt;% mutate(likelihood = prior * VGAM::dbetabinom.ab(H, AB, alpha, beta)) %&gt;% group_by(playerID) %&gt;% mutate(posterior = likelihood / sum(likelihood)) career_assignments &lt;- career_likelihoods %&gt;% top_n(1, posterior) %&gt;% ungroup() # 对比这种分组与实际数据的结果 career_assignments %&gt;% filter(posterior &gt; .8) %&gt;% count(isPitcher, cluster) %&gt;% spread(cluster, n) ## # A tibble: 2 x 3 ## isPitcher A B ## &lt;lgl&gt; &lt;int&gt; &lt;int&gt; ## 1 FALSE 26 2135 ## 2 TRUE 542 160 这样基于对概率分布的观察，我们可以实现有现实意义的分组，对分组的改进则需要对数据的进一步理解 9.14.3 经验贝叶斯收缩 混合模型下前面所做的工作都需要重新考虑 # 观察击球数100选手的后验概率分布 batting_data &lt;- career_likelihoods %&gt;% ungroup() %&gt;% filter(AB == 100) %&gt;% mutate(name = paste0(name, &quot; (&quot;, H, &quot;/&quot;, AB, &quot;)&quot;), name = reorder(name, H), alpha1 = H + alpha, beta1 = AB - H + beta) batting_data %&gt;% crossing(x = seq(0, .4, .001)) %&gt;% mutate(posterior_density = posterior * dbeta(x, alpha1, beta1)) %&gt;% group_by(name, x) %&gt;% summarize(posterior_density = sum(posterior_density)) %&gt;% ggplot(aes(x, posterior_density, color = name)) + geom_line(show.legend = FALSE) + geom_vline(aes(xintercept = average), data = batting_data, lty = 2) + facet_wrap(~ name) + labs(x = &quot;Batting average (actual average shown as dashed line)&quot;, y = &quot;Posterior density after updating&quot;) 此时不太好判断属于哪一分布，可采用后验概率对平均分布进行加权 eb_shrinkage &lt;- career_likelihoods %&gt;% mutate(shrunken_average = (H + alpha) / (AB + alpha + beta)) %&gt;% group_by(playerID) %&gt;% summarize(shrunken_average = sum(posterior * shrunken_average)) # 观察加权分布 eb_shrinkage %&gt;% inner_join(career) %&gt;% filter(AB &gt; 50) %&gt;% gather(type, value, average, shrunken_average) %&gt;% mutate(type = ifelse(type == &quot;average&quot;, &quot;Raw batting average&quot;, &quot;Average posterior&quot;), type = relevel(factor(type), &quot;Raw batting average&quot;)) %&gt;% ggplot(aes(AB, value)) + geom_point() + facet_wrap(~ type) + scale_x_log10() + ylab(&quot;Estimate&quot;) - 收敛后的分布会朝向两个中心而不是一个，并非所有之前的方法（例如区间估计）都可以适用到混合模型里，需要根据实际情况进行分析 9.15 模拟验证结果 上面的经验贝叶斯推断大都是给出的结果，我们需要对其进行模拟验证 pitchers &lt;- Pitching %&gt;% group_by(playerID) %&gt;% summarize(gamesPitched = sum(G)) %&gt;% filter(gamesPitched &gt; 3) career &lt;- Batting %&gt;% filter(AB &gt; 0) %&gt;% anti_join(pitchers, by = &quot;playerID&quot;) %&gt;% group_by(playerID) %&gt;% summarize(H = sum(H), AB = sum(AB)) # 从数据中找到贝塔分布的两个参数 library(ebbr) prior &lt;- career %&gt;% ebb_fit_prior(H, AB) prior ## Empirical Bayes binomial fit with method mle ## Parameters: ## # A tibble: 1 x 2 ## alpha beta ## &lt;dbl&gt; &lt;dbl&gt; ## 1 72.7 217. # 用这两个参数生成球员的击球概率 alpha0 &lt;- tidy(prior)$alpha beta0 &lt;- tidy(prior)$beta qplot(rbeta(10000, alpha0, beta0)) # 击球数使用原始数据 ggplot(career, aes(AB)) + geom_histogram() + scale_x_log10() # 构建仿真数据 set.seed(2017) career_sim &lt;- career %&gt;% mutate(p = rbeta(n(), alpha0, beta0), H = rbinom(n(), AB, p)) career_sim ## # A tibble: 10,590 x 4 ## playerID H AB p ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 aaronha01 3661 12364 0.299 ## 2 aaronto01 229 944 0.249 ## 3 abadan01 2 21 0.273 ## 4 abadijo01 6 49 0.198 ## 5 abbated01 746 3044 0.249 ## 6 abbeych01 445 1751 0.264 ## 7 abbotda01 2 7 0.191 ## 8 abbotfr01 122 513 0.251 ## 9 abbotje01 154 596 0.243 ## 10 abbotku01 583 2044 0.261 ## # ... with 10,580 more rows 9.15.1 模拟对分布参数的估计 生产数据后我们可以估计分布参数，看能否与模拟值对应 career_sim_eb &lt;- career_sim %&gt;% add_ebb_estimate(H, AB) career_sim_gathered &lt;- career_sim_eb %&gt;% rename(Shrunken = .fitted, Raw = .raw) %&gt;% gather(type, estimate, Shrunken, Raw) # 观察是否能收敛数据 career_sim_gathered %&gt;% filter(AB &gt;= 10) %&gt;% ggplot(aes(p, estimate, color = AB)) + geom_point() + geom_abline(color = &quot;red&quot;) + geom_smooth(method = &quot;lm&quot;, color = &quot;white&quot;, lty = 2, se = FALSE) + scale_color_continuous(trans = &quot;log&quot;, breaks = c(10, 100, 1000, 10000)) + facet_wrap(~ type) + labs(x = &quot;True batting average (p)&quot;, y = &quot;Raw or shrunken batting average&quot;, title = &quot;Empirical Bayes shrinkage reduces variance, but causes bias&quot;, subtitle = &quot;Red line is x = y; dashed white line is a linear fit&quot;) 我们可以看到，估计方差有了一定收敛，但出现了一定偏差，可参考统计学习中方差-偏差权衡的描述 可以用均方误来衡量，此处虽牺牲了偏差，但整体误差降低了 \\[\\mbox{MSE}=\\frac{1}{n}\\sum_{1}^{n}(p-\\hat{p})^2\\] career_sim_gathered %&gt;% group_by(type) %&gt;% summarize(mse = mean((estimate - p) ^ 2)) ## # A tibble: 2 x 2 ## type mse ## &lt;chr&gt; &lt;dbl&gt; ## 1 Raw 0.0145 ## 2 Shrunken 0.000335 注意到击球数可能影响收敛，所以可以探索其对均方误的影响 metric_by_bin &lt;- career_sim_gathered %&gt;% group_by(type, AB = 10 ^ (round(log10(AB)))) %&gt;% summarize(mse = mean((estimate - p) ^ 2)) ggplot(metric_by_bin, aes(AB, mse, color = type)) + geom_line() + scale_x_log10() + scale_y_log10() + labs(x = &quot;Number of at-bats (AB)&quot;, y = &quot;Mean-squared-error within this bin (note log scale)&quot;, title = &quot;Mean squared error is higher with raw estimate, especially for low AB&quot;) 击球数越多，均方误越低，此时可进一步探索 library(scales) # 观察斜率p值变化 career_sim_gathered %&gt;% mutate(AB = 10 ^ (round(log10(AB)))) %&gt;% filter(AB &gt; 1) %&gt;% nest(-type, -AB) %&gt;% unnest(map(data, ~ tidy(lm(estimate ~ p, .)))) %&gt;% filter(term == &quot;p&quot;) %&gt;% ggplot(aes(AB, estimate, color = type)) + geom_line() + scale_x_log10(breaks = c(10, 100, 1000, 10000)) + geom_hline(yintercept = 1, lty = 2) + labs(x = &quot;Number of at-bats (AB)&quot;, y = &quot;Slope of estimate/p within this bin&quot;, title = &quot;Shrunken estimates introduce bias for low AB&quot;, subtitle = &quot;Note that an unbiased estimate would have a slope of 0&quot;) # 分层 career_sim_gathered %&gt;% mutate(ab_bin = cut(AB, c(0, 10, 100, 1000, Inf), labels = c(&quot;1-10&quot;, &quot;11-100&quot;, &quot;101-1000&quot;, &quot;1000+&quot;))) %&gt;% ggplot(aes(p, estimate, color = AB)) + geom_point() + geom_abline(color = &quot;red&quot;) + geom_smooth(method = &quot;lm&quot;, color = &quot;gray&quot;, lty = 2, se = FALSE) + scale_color_continuous(trans = &quot;log&quot;, breaks = c(10, 100, 1000, 10000)) + facet_grid(ab_bin ~ type, scales = &quot;free_y&quot;) + labs(x = &quot;True batting average (p)&quot;, y = &quot;Raw or shrunken estimate&quot;, title = &quot;Empirical Bayes shrinkage reduces variance, but introduces bias&quot;, subtitle = &quot;Red line is x = y; dashed white line is a linear fit&quot;) 击球数越多，越接近真相 9.15.2 区间估计 检验区间估计是否覆盖95%的真值 career_sim_eb %&gt;% summarize(coverage = mean(.low &lt;= p &amp; p &lt;= .high)) ## # A tibble: 1 x 1 ## coverage ## &lt;dbl&gt; ## 1 0.951 观察不同区间的覆盖范围 sim_prior &lt;- ebb_fit_prior(career_sim, H, AB) estimate_by_cred_level &lt;- data_frame(level = seq(.5, .98, .02)) %&gt;% unnest(map(level, ~ augment(sim_prior, career_sim, cred_level = .))) estimate_by_cred_level %&gt;% group_by(level) %&gt;% mutate(cover = .low &lt;= p &amp; p &lt;= .high) %&gt;% summarize(coverage = mean(cover)) %&gt;% ggplot(aes(level, coverage)) + geom_point() + geom_abline(color = &quot;red&quot;) + labs(x = &quot;Level of credible interval&quot;, y = &quot;Probability credible interval contains the true value&quot;) 结果基本吻合，说明区间估计也比较准 9.15.3 错误发现率 看一下进入名人堂的人 pt &lt;- career_sim_eb %&gt;% add_ebb_prop_test(.3, sort = TRUE) # 错误发现率控制为10% hall_of_fame &lt;- pt %&gt;% filter(.qvalue &lt;= .1) mean(hall_of_fame$p &lt; .3) ## [1] 0.128 # 观察整体错误发现率的变动 pt %&gt;% mutate(true_fdr = cummean(p &lt; .3)) %&gt;% ggplot(aes(.qvalue, true_fdr)) + geom_line() + geom_abline(color = &quot;red&quot;) + labs(x = &quot;q-value&quot;, y = &quot;True FDR at this q-value threshold&quot;) 9.15.4 贝塔二项回归 看下影响因素 # 回归值 bb_reg &lt;- career %&gt;% ebb_fit_prior(H, AB, method = &quot;gamlss&quot;, mu_predictors = ~ log10(AB)) tidy(bb_reg) ## # A tibble: 3 x 6 ## parameter term estimate std.error statistic p.value ## &lt;fct&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 mu (Intercept) -1.68 0.00896 -188. 0 ## 2 mu log10(AB) 0.191 0.00277 69.1 0 ## 3 sigma (Intercept) -6.30 0.0229 -275. 0 set.seed(2017) career_sim_ab &lt;- augment(bb_reg, career) %&gt;% dplyr::select(playerID, AB, true_alpha0 = .alpha0, true_beta0 = .beta0) %&gt;% mutate(p = rbeta(n(), true_alpha0, true_beta0), H = rbinom(n(), AB, p)) # 真实值 career_ab_prior &lt;- career_sim_ab %&gt;% ebb_fit_prior(H, AB, method = &quot;gamlss&quot;, mu_predictors = ~ log10(AB)) # 对比 tidy(career_ab_prior) ## # A tibble: 3 x 6 ## parameter term estimate std.error statistic p.value ## &lt;fct&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 mu (Intercept) -1.70 0.00893 -190. 0 ## 2 mu log10(AB) 0.194 0.00276 70.4 0 ## 3 sigma (Intercept) -6.31 0.0260 -243. 0 # 观察击球数影响 career_flat_prior &lt;- career_sim_ab %&gt;% ebb_fit_prior(H, AB) data_frame(method = c(&quot;Flat prior&quot;, &quot;Prior depending on AB&quot;), model = list(career_flat_prior, career_ab_prior)) %&gt;% unnest(map(model, augment, data = career_sim_ab)) %&gt;% ggplot(aes(p, .fitted, color = AB)) + geom_point() + scale_color_continuous(trans = &quot;log&quot;) + geom_abline(color = &quot;red&quot;) + facet_wrap(~ method) + labs(x = &quot;True batting average (p)&quot;, y = &quot;Shrunken batting average estimate&quot;) 9.15.5 重复模拟 为防止意外或运气可以重复模拟看看 set.seed(2017) sim_replications &lt;- career %&gt;% crossing(replication = 1:50) %&gt;% mutate(p = rbeta(n(), alpha0, beta0), H = rbinom(n(), AB, p)) sim_replications ## # A tibble: 529,500 x 5 ## playerID H AB replication p ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 aaronha01 3736 12364 1 0.299 ## 2 aaronha01 3079 12364 2 0.249 ## 3 aaronha01 3323 12364 3 0.273 ## 4 aaronha01 2405 12364 4 0.198 ## 5 aaronha01 3109 12364 5 0.249 ## 6 aaronha01 3283 12364 6 0.264 ## 7 aaronha01 2353 12364 7 0.191 ## 8 aaronha01 3053 12364 8 0.251 ## 9 aaronha01 3043 12364 9 0.243 ## 10 aaronha01 3268 12364 10 0.261 ## # ... with 529,490 more rows sim_replication_models &lt;- sim_replications %&gt;% nest(-replication) %&gt;% mutate(prior = map(data, ~ ebb_fit_prior(., H, AB))) # 估计参数 sim_replication_priors &lt;- sim_replication_models %&gt;% unnest(map(prior, tidy), .drop = TRUE) sim_replication_priors ## # A tibble: 50 x 4 ## replication alpha beta mean ## &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 69.0 206. 0.251 ## 2 2 72.5 216. 0.252 ## 3 3 72.7 217. 0.250 ## 4 4 74.3 222. 0.251 ## 5 5 71.9 215. 0.250 ## 6 6 71.8 214. 0.251 ## 7 7 72.7 217. 0.251 ## 8 8 71.3 213. 0.251 ## 9 9 75.9 227. 0.251 ## 10 10 71.5 213. 0.251 ## # ... with 40 more rows true_values &lt;- data_frame(parameter = c(&quot;alpha&quot;, &quot;beta&quot;, &quot;mean&quot;), true = c(alpha0, beta0, alpha0 / (alpha0 + beta0))) sim_replication_priors %&gt;% gather(parameter, value, -replication) %&gt;% inner_join(true_values, by = &quot;parameter&quot;) %&gt;% ggplot(aes(1, value)) + geom_boxplot() + geom_hline(aes(yintercept = true), color = &quot;red&quot;, lty = 2) + facet_wrap(~ parameter, scales = &quot;free_y&quot;) + labs(x = &quot;&quot;, y = &quot;Estimated parameter (true value shown as red line)&quot;, title = &quot;Estimated hyperparameters across 50 replications&quot;) # 估计区间与假设检验 ## 估计均方误 sim_replication_au &lt;- sim_replication_models %&gt;% unnest(map2(prior, data, augment)) sim_replication_mse &lt;- sim_replication_au %&gt;% rename(Raw = .raw, Shrunken = .fitted) %&gt;% gather(type, estimate, Raw, Shrunken) %&gt;% group_by(type, replication) %&gt;% summarize(mse = mean((estimate - p) ^ 2)) ggplot(sim_replication_mse, aes(type, mse)) + geom_boxplot() + ylab(&quot;Mean squared error across 50 replications&quot;) ## 估计区间 sim_replication_au %&gt;% mutate(cover = .low &lt;= p &amp; p &lt;= .high) %&gt;% group_by(replication) %&gt;% summarize(coverage = mean(cover)) %&gt;% ggplot(aes(coverage)) + geom_histogram(binwidth = .001) + labs(x = &quot;% of time true value was in a 95% confidence interval&quot;, title = &quot;95% credible interval is well calibrated across replications&quot;) sim_replication_intervals &lt;- sim_replication_models %&gt;% crossing(cred_level = c(seq(.5, .9, .05), .95)) %&gt;% unnest(pmap(list(prior, data, cred_level = cred_level), augment)) %&gt;% dplyr::select(replication, cred_level, p, .low, .high) sim_replication_intervals %&gt;% mutate(cover = .low &lt;= p &amp; p &lt;= .high) %&gt;% group_by(replication, cred_level) %&gt;% summarize(coverage = mean(cover)) %&gt;% ggplot(aes(cred_level, coverage, group = replication)) + geom_line(alpha = .3) + geom_abline(color = &quot;red&quot;) + labs(x = &quot;Credibility level&quot;, y = &quot;% of credible intervals in this replication that contain the true parameter&quot;, title = &quot;Credible intervals are well calibrated across 50 replications&quot;, subtitle = &quot;Red line is x = y&quot;) ## q值的稳定性 sim_replication_prop_tests &lt;- sim_replication_au %&gt;% nest(-replication) %&gt;% unnest(map(data, add_ebb_prop_test, threshold = .3, sort = TRUE)) sim_replication_prop_tests %&gt;% group_by(replication) %&gt;% mutate(fdr = cummean(p &lt; .3)) %&gt;% ggplot(aes(.qvalue, fdr, group = replication)) + geom_line(alpha = .3) + geom_abline(color = &quot;red&quot;) + labs(x = &quot;Q-value threshold&quot;, y = &quot;Proportion of false discoveries below this threshold&quot;, title = &quot;Q-value successfully controls FDR across 50 replications&quot;) 9.16 网络资源 贝叶斯方法 "]
]
